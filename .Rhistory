true_absence_ML <- function(x){ # for collecting true absence records from BLM land.
taxon <- x %>% distinct(binomial) %>%  pull(binomial)
taxon <- taxon[1]
TA_req <- round(x$no_record[1] * prop_blm, 0) # how many true absences needed?
presence_PK <- x %>% pull(PlotKey) # which plots can absences not occur in because a presence is there?
AIM_absence <- AIM_points %>% # remove plots with an occurrence of the taxon.
filter(!PlotKey %in% presence_PK)  #%>% # make sure the plot does not have a presence record
#slice_sample(n = TA_req, replace = F)
AIM_absence <- AIM_absence[sample(1:nrow(AIM_absence), size =  TA_req, replace = F),]
#    mutate('binomial' = taxon) %>%
#    mutate(no_record = TA_req)
#  AIM_absence %>% dplyr::select(4,1,5,2,3)
#  out <- rbind(x, AIM_absence)
# return(out)
return(TA_req)
}
PA_ML_DF <- lapply(spp_occurrence_list[2], true_absence_ML)
PA_ML_DF <- lapply(spp_occurrence_list[1:3], true_absence_ML)
PA_ML_DF <- lapply(spp_occurrence_list[1:3], true_absence_ML)
View(PA_ML_DF)
PA_ML_DF[["Acer_glabrum"]]
true_absence_ML <- function(x){ # for collecting true absence records from BLM land.
taxon <- x %>% distinct(binomial) %>%  pull(binomial)
taxon <- taxon[1]
TA_req <- round(x$no_record[1] * prop_blm, 0) # how many true absences needed?
presence_PK <- x %>% pull(PlotKey) # which plots can absences not occur in because a presence is there?
AIM_absence <- AIM_points %>% # remove plots with an occurrence of the taxon.
filter(!PlotKey %in% presence_PK)  #%>% # make sure the plot does not have a presence record
#slice_sample(n = TA_req, replace = F)
AIM_absence <- AIM_absence[sample(1:nrow(AIM_absence), size =  TA_req, replace = F),]
#    mutate('binomial' = taxon) %>%
#    mutate(no_record = TA_req)
#  AIM_absence %>% dplyr::select(4,1,5,2,3)
#  out <- rbind(x, AIM_absence)
# return(out)
return(AIM_absence)
}
PA_ML_DF <- lapply(spp_occurrence_list[1:3], true_absence_ML)
PA_ML_DF <- lapply(spp_occurrence_list[1:3], true_absence_ML)
View(PA_ML_DF)
PA_ML_DF[["Acer_glabrum"]]
true_absence_ML <- function(x){ # for collecting true absence records from BLM land.
taxon <- x %>% distinct(binomial) %>%  pull(binomial)
taxon <- taxon[1]
TA_req <- round(x$no_record[1] * prop_blm, 0) # how many true absences needed?
presence_PK <- x %>% pull(PlotKey) # which plots can absences not occur in because a presence is there?
AIM_absence <- AIM_points %>% # remove plots with an occurrence of the taxon.
filter(!PlotKey %in% presence_PK)  %>% # make sure the plot does not have a presence record
mutate('binomial' = taxon) %>%
mutate(no_record = TA_req)
AIM_absence <- AIM_absence[sample(1:nrow(AIM_absence), size =  TA_req, replace = F),]
#  AIM_absence %>% dplyr::select(4,1,5,2,3)
#  out <- rbind(x, AIM_absence)
# return(out)
return(AIM_absence)
}
PA_ML_DF <- lapply(spp_occurrence_list[1:3], true_absence_ML)
true_absence_ML <- function(x){ # for collecting true absence records from BLM land.
taxon <- x %>% distinct(binomial) %>%  pull(binomial)
taxon <- taxon[1]
TA_req <- round(x$no_record[1] * prop_blm, 0) # how many true absences needed?
presence_PK <- x %>% pull(PlotKey) # which plots can absences not occur in because a presence is there?
AIM_absence <- AIM_points %>% # remove plots with an occurrence of the taxon.
filter(!PlotKey %in% presence_PK)  %>% # make sure the plot does not have a presence record
mutate('binomial' = taxon) %>%
mutate(no_record = TA_req)
AIM_absence <- AIM_absence[sample(1:nrow(AIM_absence), size =  TA_req, replace = F),]
out <- rbind(x, AIM_absence)
return(out)
}
PA_ML_DF <- lapply(spp_occurrence_list[1:3], true_absence_ML)
View(spp_occurrence_list)
View(PA_ML_DF)
PA_ML_DF <- lapply(spp_occurrence_list, true_absence_ML)
round(1000 * prop_blm, 0)
spp_occurrence_REG_list <- split(spp_occurrences_reg_random, spp_occurrences_reg_random$binomial)
PA_REG_DF <- lapply(spp_occurrence_REG_list, FUN = true_absence_REG)
true_absence_REG <- function(x){ # for collecting true absence records from BLM land.
taxon <- x %>% distinct(binomial) %>% pull(binomial)
taxon <- taxon[1]
TA_req <- round(1000 * prop_blm, 0) # For regression without ML we need 1k records * prop of blm land.
presence_PK <- x %>% pull(PlotKey)
AIM_absence <- AIM_points %>%
filter(!PlotKey %in% presence_PK) %>%
mutate('binomial' = taxon) %>%
mutate(no_record = TA_req)
AIM_absence <- AIM_absence[sample(1:nrow(AIM_absence), size =  TA_req, replace = F),]
out <- rbind(x, AIM_absence)
return(out)
}
PA_REG_DF <- lapply(spp_occurrence_REG_list, FUN = true_absence_REG)
source(here::here('scripts/sdm_functions.R'))
PA_REG_DF <- split(PA_REG_DF, f = PA_REG_DF$binomial)
View(PA_REG_DF)
ecoregion_bound <- st_transform(ecoregion_bound, 5070)
blm_cp_s <- BLM_CP %>%
st_transform(5070) %>%
st_buffer(400) # we will buffer the BLM fine borders to 400 m as these areas are virtually always in the same landscape feature the method was designed to capture.
blm_cp_s <- rmapshaper::ms_simplify(blm_cp_s, keep = 0.05) %>% # we will simplify the shapes of the BLM land.
st_make_valid()
st_erase = function(x, y) st_difference(x, st_union(st_combine(y))) # function to erase the BLM land from area.
blm_cp_s <- st_erase(ecoregion_bound, blm_cp_s) %>%
st_cast(to = "POLYGON") # turn all polygons in the feature to their own vector objects
blm_cp_s$AREA <- st_area(blm_cp_s) # calculate the area of polygons to remove minor inclusions (e.g. private land on post-stamped BLM)
blm_cp_s <- blm_cp_s %>%
mutate(AREA = as.numeric(AREA)) %>% # units in meters squared
filter(AREA >= 1000000) %>%  # > 1,000 hectare.
st_union()
PA_REG_DF <- PA_REG_DF %>%
map(~st_buffer(.x, 10000))
map(~st_transform(.x, 5070))
map(~st_transform( 5070))
PA_REG_DF <- PA_REG_DF %>%
map(~st_buffer(.x, 10000)) %>%
map(~st_transform(.x, 5070))
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random') %>%
st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
rename('geometry' = x) %>%
mutate(no_record = nrow(.))
out <- rbind(x, pseudo_abs)
}
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random') %>%
st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
rename('geometry' = x) %>%
mutate(no_record = nrow(.))
out <- rbind(x, pseudo_abs)
}
Sys.time()
test <- lapply(PA_REG_DF, random_PA_spatial) # about 4 hours.
Sys.time()
test1 <- data.table::rbindlist(test) %>%  st_as_sf()
test1 <- data.table::rbindlist(test) %>%  st_as_sf()
View(test1)
test2 <- st_centroid(test1)
test2 <- st_centroid(test1)
head(test1)
View(test1)
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
#  pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random') %>%
#    st_as_sf() %>%
#    mutate(occurrence = 0) %>%
#    mutate(binomial = taxon) %>%
#    mutate(PlotKey = NA) %>%
#    rename('geometry' = x) %>%
#    mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:3], random_PA_spatial) # about 30 minutes
View(test_ALP)
test_ALP[["Acer_negundo"]]
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random') #%>%
st_as_sf() %>%
#    mutate(occurrence = 0) %>%
#    mutate(binomial = taxon) %>%
#    mutate(PlotKey = NA) %>%
#    rename('geometry' = x) %>%
#    mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:3], random_PA_spatial) # about 30 minutes
View(test_ALP)
test_ALP[["Acer_glabrum"]]
test_ALP[["Acer_negundo"]]
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random') #%>%
#st_as_sf() %>%
#    mutate(occurrence = 0) %>%
#    mutate(binomial = taxon) %>%
#    mutate(PlotKey = NA) %>%
#    rename('geometry' = x) %>%
#    mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:3], random_PA_spatial) # about 30 minutes
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
#  pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random') #%>%
#st_as_sf() %>%
#    mutate(occurrence = 0) %>%
#    mutate(binomial = taxon) %>%
#    mutate(PlotKey = NA) %>%
#    rename('geometry' = x) %>%
#    mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:3], random_PA_spatial) # about 30 minutes
View(test_ALP)
test_ALP[["Acer_glabrum"]]
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
return(blm_cp_sUB)
#  pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random') #%>%
#st_as_sf() %>%
#    mutate(occurrence = 0) %>%
#    mutate(binomial = taxon) %>%
#    mutate(PlotKey = NA) %>%
#    rename('geometry' = x) %>%
#    mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
View(test_ALP)
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(blm_cp_s, x_buf)
return(blm_cp_sUB)
#  pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random') #%>%
#st_as_sf() %>%
#    mutate(occurrence = 0) %>%
#    mutate(binomial = taxon) %>%
#    mutate(PlotKey = NA) %>%
#    rename('geometry' = x) %>%
#    mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
View(test_ALP)
test_ALP[["Acer_negundo"]]
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random', by_polygon = F) #%>%
#st_as_sf() %>%
#    mutate(occurrence = 0) %>%
#    mutate(binomial = taxon) %>%
#    mutate(PlotKey = NA) %>%
#    rename('geometry' = x) %>%
#    mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
test_ALP[["Acer_glabrum"]]
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random', by_polygon = F) #%>%
st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
rename('geometry' = x) %>%
mutate(no_record = nrow(.))
out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random', by_polygon = F) %>%
st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
rename('geometry' = x) %>%
mutate(no_record = nrow(.))
out <- rbind(x, pseudo_abs)
}
o
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
test_ALP[["Acer_glabrum"]]
test_ALP[["Acer_glabrum"]]
test_ALP[["Acer_negundo"]]
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random', by_polygon = F) %>%
st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
#rename('geometry' = x) %>%
mutate(no_record = nrow(.))
out <- rbind(x, pseudo_abs)
}
test1 <- data.table::rbindlist(test_ALP) %>%  st_as_sf()
st_geometry(test1)
test1 <- data.table::rbindlist(test) %>%  st_as_sf() %>% st_centroid()
View(test_ALP[["Acer_negundo"]])
PA_REG_DF1 <- PA_REG_DF %>%
map(~st_buffer(.x, 10000)) %>%
map(~st_transform(.x, 5070))
rm(PA_REG_DF1)
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random', by_polygon = F) %>%
#st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
#rename('geometry' = x) %>%
mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random', by_polygon = F) %>%
st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
#rename('geometry' = x) %>%
mutate(no_record = nrow(.))
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
View(test_ALP)
test_ALP[["Acer_glabrum"]]
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random', by_polygon = F) %>%
st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
rename('geometry' = x) %>%
mutate(no_record = nrow(.))
x <- st_centroid(x)
#  out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
test_ALP[["Acer_glabrum"]]
test_ALP[["Acer_negundo"]]
View(PA_REG_DF)
random_PA_spatial <- function(x){
taxon <- x %>% pull(binomial)
taxon <- taxon[1]
no_ab <- x %>% filter(occurrence == 0) %>% nrow()
PA_req <- 1000 - no_ab # we will make 1200, and then remove those with high similarity to the target points.
x_buf <- st_buffer(x, 9000)
blm_cp_sUB <- st_erase(x_buf, blm_cp_s)
pseudo_abs <- st_sample(blm_cp_sUB, size = PA_req, type = 'random', by_polygon = F) %>%
st_as_sf() %>%
mutate(occurrence = 0) %>%
mutate(binomial = taxon) %>%
mutate(PlotKey = NA) %>%
rename('geometry' = x) %>%
mutate(no_record = nrow(.))
x <- st_centroid(x)
out <- rbind(x, pseudo_abs)
}
test_ALP <- lapply(PA_REG_DF[1:2], random_PA_spatial) # about 30 minutes
View(test_ALP)
test_ALP[["Acer_glabrum"]]
test_ALP[["Acer_negundo"]]
Sys.time()
test <- lapply(PA_REG_DF, random_PA_spatial) # about 30 minutes
Sys.time()
test1 <- data.table::rbindlist(test) %>%  st_as_sf() %>% st_centroid()
test2 <- st_centroid(test1)
ecoregion_bound <- st_transform(ecoregion_bound, 5070)
blm_cp_s <- BLM_CP %>%
st_transform(5070) %>%
st_buffer(400) # we will buffer the BLM fine borders to 400 m as these areas are virtually always in the same landscape feature the method was designed to capture.
library(tidyverse) # data tidying
library(sf) # spatial data compliant with tidyverse
library(raster) # raster data
library(here)
source(here::here('scripts/sdm_functions.R'))
set.seed(12)
View(variance_calcs)
augs_synchrony <- function(dataset, frst_day, lst_day, year_samp, grp_var1){
# Dataset a data frame containing values to perform calculations on
# year_samp = column holding information on year,
# frst_day = column containing the INITIATION DATE of a phenological event
# lst_dat = column containing the FINAL DATE of a phenological event
# grp_var1 = one level of grouping to have the function focus on.
frst_day <- enquo(frst_day)
lst_day <- enquo(lst_day)
# grouping variables too
year_samp <- enquo(year_samp)
grp_var1 <- enquo(grp_var1)
#grp_var2 <- enquo(grp_var2)
dataset <- dataset %>%
mutate(across(c(!!frst_day, !!lst_day), function(x) as.integer(x)))
results <- dataset %>%
group_by(!!year_samp, !!grp_var1,
#!!grp_var2
) %>% # the year of analysis, and the population variables if on multiyear data.
# TERM A FOR THE INDIVIDUAL $X_{i}$
# term one population (\frac{1}{n-1})
mutate(at1 = 1/(n() -1)) %>%
mutate(across(c(!!frst_day, !!lst_day),
function(x) as_date(x, origin = paste0(year-1, "-12-31")))
) %>%
mutate(interval_obs = interval(ymd(!!frst_day), ymd(!!lst_day))) %>%
# term two, (\frac{1}{f_{i}}) duration of event for individual.
# note duration returns seconds, but these data are at resolution of day.
mutate(at2 = 1/
(as.numeric(
lubridate::as.duration(!!lst_day - !!frst_day)
)
/86400
)
) %>%
# term 3: all days individual i is flowering with other individuals
# \sum_{j = i}^{n} e_{j != i}
mutate(at3 = map_dbl(interval_obs, # @ shs on SO
\(x) x %>%
intersect(interval_obs) %>%
int_length() %>%
sum(na.rm = T) - int_length(x)
) / 86400) %>%
# the index of synchrony for individual i
rowwise() %>%
mutate(augs.indx.indiv. = at1 * at2 * at3) %>%
group_by(!!year_samp, !!grp_var1) %>%
## TERM B FOR THE POPULATION
mutate(bt1 = 1/n()) %>% # $\frac{1}{n}$ 1/sample size
mutate(bt2 = sum(augs.indx.indiv.)) %>% # \sum_{j = 1}^{n}X_{i}
mutate(augs.index.pop = bt1 * bt2)  %>%
# clean return data
dplyr::select(-at1, -at2, -at3, -bt1, -bt2, -interval_obs)
return(results)
}
dummy_dat <- read_csv(paste0(here(), "/data/dummy_data.csv"))
dummy_dat <- read_csv(paste0(here(), "/data/dummy_data.csv"))
library(here)
library(tidyverse)
library(lubridate)
dummy_dat <- read_csv(paste0(here(), "/data/dummy_data.csv"))
here()
set_here(path='..')
dummy_dat <- read_csv(paste0(here(), "/data/dummy_data.csv"))
setwd('/hdd/Assorted_R_functions/Augspurger_Synchrony')
getwd()
set_here(path='..')
set_here(path='.')
